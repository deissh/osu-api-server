// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/rl-os/api/api"
	"github.com/rl-os/api/app"
	config2 "github.com/rl-os/api/config"
	"github.com/rl-os/api/pkg"
	"github.com/rl-os/api/pkg/bancho"
	"github.com/rl-os/api/pkg/config"
	"github.com/rl-os/api/pkg/log"
	"github.com/rl-os/api/pkg/transports"
	"github.com/rl-os/api/pkg/transports/http"
	"github.com/rl-os/api/pkg/validator"
	"github.com/rl-os/api/store/gorm"
)

// Injectors from wire.go:

func Injector(configPath string) (transports.Server, error) {
	viper, err := config.New(configPath)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(logger, viper)
	if err != nil {
		return nil, err
	}
	appOptions, err := app.NewOptions(logger, viper)
	if err != nil {
		return nil, err
	}
	configConfig := config2.Init(configPath)
	store := sql.Init(configConfig)
	banchoOptions, err := bancho.NewOptions(logger, viper)
	if err != nil {
		return nil, err
	}
	client := bancho.New(banchoOptions)
	appApp := app.New(appOptions, store, client)
	inst, err := validator.New()
	if err != nil {
		return nil, err
	}
	userController := api.NewUserController(appApp, logger, inst)
	chatController := api.NewChatController(appApp, logger, inst)
	friendController := api.NewFriendController(appApp, logger, inst)
	beatmapController := api.NewBeatmapController(appApp, logger, inst)
	beatmapSetController := api.NewBeatmapSetController(appApp, logger, inst)
	currentUserController := api.NewCurrentUserController(appApp, logger, inst)
	oAuthTokenController := api.NewOAuthTokenController(appApp, logger, inst)
	oAuthClientController := api.NewOAuthClientController(appApp, logger, inst)
	initControllers := api.CreateInitControllersFn(userController, chatController, friendController, beatmapController, beatmapSetController, currentUserController, oAuthTokenController, oAuthClientController)
	echo := http.NewRouter(httpOptions, logger, initControllers)
	server, err := http.New(httpOptions, logger, echo)
	if err != nil {
		return nil, err
	}
	return server, nil
}

// wire.go:

var providerSet = wire.NewSet(pkg.ProviderSet, api.ProviderSet, app.ProviderSet, http.ProviderSet, sql.Init, config2.Init)
