// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/rl-os/api/api"
	"github.com/rl-os/api/app"
	"github.com/rl-os/api/repository/gorm"
	"github.com/rl-os/api/services"
	"github.com/rl-os/api/services/bancho"
	"github.com/rl-os/api/services/config"
	"github.com/rl-os/api/services/log"
	"github.com/rl-os/api/services/transports"
	"github.com/rl-os/api/services/transports/http"
	"github.com/rl-os/api/services/validator"
)

// Injectors from wire.go:

func Injector(configPath string) (transports.Server, error) {
	viper, err := config.New(configPath)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(logger, viper)
	if err != nil {
		return nil, err
	}
	appOptions, err := app.NewOptions(logger, viper)
	if err != nil {
		return nil, err
	}
	banchoOptions, err := bancho.NewOptions(logger, viper)
	if err != nil {
		return nil, err
	}
	client := bancho.New(banchoOptions)
	gormOptions, err := gorm.NewOptions(logger, viper)
	if err != nil {
		return nil, err
	}
	supplier, err := gorm.NewSupplier(logger, gormOptions)
	if err != nil {
		return nil, err
	}
	beatmap := gorm.NewBeatmapRepository(supplier)
	beatmapSet := gorm.NewBeatmapSetRepository(supplier)
	chat := gorm.NewChatRepository(supplier)
	friend := gorm.NewFriendRepository(supplier)
	oAuthOptions, err := gorm.NewOAuthOptions(logger, viper)
	if err != nil {
		return nil, err
	}
	oAuth := gorm.NewOAuthRepository(oAuthOptions, supplier)
	user := gorm.NewUserRepository(supplier)
	appApp := app.New(appOptions, client, beatmap, beatmapSet, chat, friend, oAuth, user)
	inst, err := validator.New()
	if err != nil {
		return nil, err
	}
	userController := api.NewUserController(appApp, logger, inst)
	chatController := api.NewChatController(appApp, logger, inst)
	friendController := api.NewFriendController(appApp, logger, inst)
	beatmapController := api.NewBeatmapController(appApp, logger, inst)
	beatmapSetController := api.NewBeatmapSetController(appApp, logger, inst)
	currentUserController := api.NewCurrentUserController(appApp, logger, inst)
	oAuthTokenController := api.NewOAuthTokenController(appApp, logger, inst)
	oAuthClientController := api.NewOAuthClientController(appApp, logger, inst)
	initControllers := api.CreateInitControllersFn(appApp, userController, chatController, friendController, beatmapController, beatmapSetController, currentUserController, oAuthTokenController, oAuthClientController)
	echo := http.NewRouter(httpOptions, logger, initControllers)
	server, err := http.New(httpOptions, logger, echo)
	if err != nil {
		return nil, err
	}
	return server, nil
}

// wire.go:

var providerSet = wire.NewSet(services.ProviderSet, api.ProviderSet, app.ProviderSet, http.ProviderSet, gorm.ProviderSet)
